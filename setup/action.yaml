name: Setup Elixir environment

branding:
  color: purple
  icon: code

description: >-
  GitHub Composite Action for installing Elixir & Beam, setting up and
  retrieving dependencies along with caching.

inputs:
  cache-path:
    default: |
      _build
      deps
    description: >-
      A list of files, directories, and wildcard patterns to cache and restore.
      By default this will cache the build and deps folder allowing for faster
      rebuilding.
    required: false
  cache-name:
    default: ${{ github.job }}
    description: >-
      (Optional) The name of the cache. This is used to build the full cache
      key. By default this uses the job name which should suffice is most
      scenarios. If you have a custom naming scheme or want to share caches
      between different actions you can set it here. The reason we set this
      differently for each job is because tools will have different compile
      settings, like credo and dialyzer, and therefor have different files
      cached.
    required: false
  cache-version:
    default: v1
    description: >-
      (Optional) A version string to include in the cache key. You can change
      this value to bust the cache if there is an error.
    required: false
  elixir-version:
    description: >-
      (Optional) Version range or exact version of Elixir to use. If this is
      not set, we attempt to read the "elixir" field from the .tool-versions
      file.
    required: false
  github-token:
    description: >-
      (Optional) Used to setup mix for pulling private packages from GitHub.
      This is usually `secrets.GH_PERSONAL_ACCESS_TOKEN`.
    required: false
  hex-organization:
    default: stord
    description: >-
      (Optional) Hex organization when authenticating. By default this will
      be the Stord hex organization.
    required: false
  hex-token:
    description: >-
      (Optional) Used to setup mix for pulling private packages from the
      hex organization. This is usually `secrets.HEX_API_KEY`.
    required: false
  oban-fingerprint:
    description: >-
      (Optional) Public key for fetching the oban pro repository data.
      This is usually refered to as OBAN_KEY_FINTERPRINT in documentation.
    required: false
  oban-token:
    description: >-
      (Optional) Oban pro license key.
    required: false
  otp-version:
    description: >-
      (Optional) Version range or exact version of Erlang/OTP to use. If this
      is not set, we attempt to read the "erlang" field from the .tool-versions
      file.
    required: false

outputs:
  cache-hit:
    description: >-
      A boolean value to indicate an exact match was found for the cache.
    value: ${{ steps.cache.outputs.cache-hit }}
  elixir-version:
    description: >-
      The exact version of Elixir installed.
    value: ${{ steps.beam.outputs.elixir-version }}
  otp-version:
    description: >-
      The exact version of Erlang/OTP installed.
    value: ${{ steps.beam.outputs.otp-version }}

runs:
  using: composite
  steps:
    - id: beam
      name: Install Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{ inputs.otp-version }}
        elixir-version: ${{ inputs.elixir-version }}
        version-file: ${{ !inputs.elixir-version && '.tool-versions' || null }}
        version-type: strict

    - id: cache
      name: Cache
      uses: actions/cache@v3
      with:
        key: elixir-setup-${{ inputs.cache-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-otp-${{ steps.beam.outputs.otp-version }}-${{ inputs.cache-name }}-${{ hashFiles('mix.lock') }}-${{ github.ref }}
        restore-keys: |
          elixir-setup-${{ inputs.cache-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-otp-${{ steps.beam.outputs.otp-version }}-${{ inputs.cache-name }}-${{ hashFiles('mix.lock') }}-
          elixir-setup-${{ inputs.cache-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-otp-${{ steps.beam.outputs.otp-version }}-${{ inputs.cache-name }}-
          elixir-setup-${{ inputs.cache-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-otp-${{ steps.beam.outputs.otp-version }}-
        path: ${{ inputs.cache-path }}

    - if: ${{ inputs.github-token }}
      name: Setup GitHub Auth
      run: git config --global url."https://x-access-token:${{ inputs.github-token }}@github.com".insteadOf "https://github.com"
      shell: bash

    - if: ${{ inputs.hex-token }}
      name: Setup Hex Auth
      run: mix hex.organization auth "${{ inputs.hex-organization }}" --key "${{ inputs.hex-token }}"
      shell: bash

    - if: ${{ inputs.oban-fingerprint && inputs.oban-token }}
      name: Setup Oban Repository
      run: |
        mix hex.repo add oban "https://getoban.pro/repo" \
          --fetch-public-key "${{ inputs.oban-fingerprint }}" \
          --auth-key "${{ inputs.oban-token }}"
      shell: bash

    - if: github.run_attempt != '1'
      name: Clean Dependencies
      run: |
        mix deps.clean --all
        mix clean

    - if: github.run_attempt != '1' || steps.cache.outputs.cache-hit != 'true'
      name: Install Dependencies
      run: mix deps.get
      shell: bash
