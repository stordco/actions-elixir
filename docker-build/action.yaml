name: Build Elixir docker container

branding:
  color: blue
  icon: anchor

description: >-
  GitHub Composite Action for building and optionally pushing Elixir & Beam
  based docker containers in an opinionated way.

inputs:
  build-args:
    description: >-
      (Optional) A list of extra build args to pass to the build step. Note
      that the github-token and hex-token will automatically be set if
      passed in.
    required: false
    type: string
  cache:
    default: true
    description: >-
      (Optional) Enables caching built docker layers in the GitHub actions
      cache. This is highly recommended to speed up builds. Note, if you are
      not getting a speed bump, check your .dockerignore file to ensure you
      are not sending files that would break layer caching, like the .git
      folder.
    required: false
    type: boolean
  context:
    default: "."
    description: >-
      (Optional) The build context to use when building the docker image.
    required: false
    type: string
  file:
    description: >-
      (Optional) The path to the Dockerfile we are building.
    required: false
    type: string
  github-token:
    default: ${{ github.token }}
    description: >-
      (Optional) Used to setup mix for pulling private packages from GitHub.
      This is usually `secrets.GH_PERSONAL_ACCESS_TOKEN`.
    required: false
    type: string
  hex-organization:
    default: stord
    description: >-
      (Optional) Hex organization when authenticating. By default this will
      be the Stord hex organization.
    required: false
    type: string
  hex-token:
    description: >-
      (Optional) Used to setup mix for pulling private packages from the
      hex organization. This is usually `secrets.HEX_API_KEY`.
    required: false
    type: string
  images:
    description: >-
      (Optional) A list of docker images to use when building and
      publishing. By default, this will match the repository being built.
      For example, if you are building `stordco/test-app`, the image will
      be `ghcr.io/stordco/test-app`.
    required: false
    type: string
  labels:
    description: >-
      (Optional) A list of labels to be added to the default ones when
      pushing the image.
    required: false
    type: string
  push:
    default: false
    description: >-
      (Optional) Push the final built image to the set registry.
    required: false
    type: boolean
  secrets:
    description: >-
      (Optional) A list of extra secrets to pass to the build step. Note
      that the github-token and hex-token will automatically be set if
      passed in.
    required: false
    type: string
  tags:
    description: >-
      (Optional) A list of tags to be added to the default ones when
      pushing the image.
    required: false
    type: string

outputs:
  digest:
    description: >-
      The docker build image digest.
    value: ${{ steps.build.outputs.digest }}
  image:
    description: >-
      The first docker image published. This can be used as reference when
      deploying the image.
    value: ${{ steps.output.outputs.image }}
  images:
    description: >-
      A list of all the published docker images.
    value: ${{ steps.inputs.output.images }}
  labels:
    description: >-
      A list of all docker labels used when publishing.
    value: ${{ steps.metadata.outputs.labels }}
  metadata:
    description: >-
      The docker build result metadata
    value: ${{ steps.build.outputs.metadata }}
  tag:
    description: >-
      A sha specific tag used when publishing the docker image. This is the most
      specific tag that won't get repeated and should be used when deploying the
      image.
    value: ${{ steps.output.outputs.tag }}
  tags:
    description: >-
      A list of all docker tags that were published.
    value: ${{ steps.metadata.outputs.tags }}

runs:
  using: composite
  steps:
    - id: inputs
      name: Get Inputs
      uses: actions/github-script@v5
      env:
        INPUT_BUILD_ARGS: ${{ inputs.build-args }}
        INPUT_CACHE: ${{ inputs.cache }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_HEX_TOKEN: ${{ inputs.hex-token }}
        INPUT_IMAGES: ${{ inputs.images }}
        INPUT_SECRETS: ${{ inputs.secrets }}
      with:
        script: |
          const buildArgs = (process.env.INPUT_BUILD_ARGS || "").split('\n')
          const secrets = (process.env.INPUT_SECRETS || "").split('\n')

          buildArgs.push(`GIT_SHA=${context.sha}`)

          if (process.env.INPUT_GITHUB_TOKEN != null) {
            buildArgs.push(`GH_PERSONAL_ACCESS_TOKEN=${process.env.INPUT_GITHUB_TOKEN}`)
            buildArgs.push(`GITHUB_PERSONAL_ACCESS_TOKEN=${process.env.INPUT_GITHUB_TOKEN}`)
            secrets.push(`github_token=${process.env.INPUT_GITHUB_TOKEN}`)
            core.info('Added GitHub token build information')
          }

          if (process.env.INPUT_HEX_TOKEN != null) {
            buildArgs.push(`HEX_TOKEN=${process.env.INPUT_HEX_TOKEN}`)
            secrets.push(`hex_token=${process.env.INPUT_HEX_TOKEN}`)
            core.info('Added Hex token build information')
          }

          core.setOutput('build-args', buildArgs.join('\n'))
          core.setOutput('secrets', secrets.join('\n'))

          if (process.env.INPUT_CACHE != null) {
            core.setOutput('cache-from', 'type=gha')
            core.setOutput('cache-to', 'type=gha,mode=max')
            core.info('Using GitHub cache for maximum performance')
          } else {
            core.setOutput('cache-from', '')
            core.setOutput('cache-to', '')
            core.info('Cache is disabled')
          }

          if (process.env.INPUT_IMAGES != null) {
            core.setOutput('images', process.env.INPUT_IMAGES)
          } else {
            const image = `ghcr.io/${context.repo.owner}/${context.repo.repo}`
            core.setOutput('images', image)
            core.info(`Setting docker image to default ${image}`)
          }

    - id: metadata
      name: Get Metadata
      uses: docker/metadata-action@v4
      with:
        flavor: |
          latest=auto
        github-token: ${{ inputs.github-token }}
        images: |
          ${{ steps.inputs.output.images }}
        labels: |
          ${{ inputs.labels }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          ${{ inputs.tags }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - id: build
      name: Build
      uses: docker/build-push-action@v3
      with:
        build-args: ${{ steps.inputs.output.build-args }}
        cache-from: ${{ steps.inputs.output.cache-from }}
        cache-to: ${{ steps.inputs.output.cache-to }}
        context: ${{ inputs.context }}
        labels: ${{ steps.metadata.outputs.labels }}
        push: ${{ inputs.push }}
        tags: ${{ steps.metadata.outputs.tags }}

    - id: outputs
      name: Get Outputs
      uses: actions/github-script@v5
      env:
        BUILD_OUTPUT: ${{ steps.metadata.outputs.json }}
      with:
        script: |
            const metadata = JSON.parse(process.env.BUILD_OUTPUT)
            const shaUrl = metadata.tags.find((t) => t.includes(':sha-'))

            if (shaUrl == null) {
              core.error('Unable to find sha tag of image')
            } else {
              const [image, tag] = shaUrl.split(':')
              core.setOutput('image', image)
              core.setOutput('tag', tag)
            }
